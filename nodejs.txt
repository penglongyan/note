**************************node.js***************************
一.node.js 简介
	1).简单的说 Node.js就是运行在服务端的javascript。
	2).是一个 (事件驱动) (I/O服务) 端JavaScript环境，基于Google的V8引擎
		执行JavaScript的速度非常快，性能非常好。



二.下载
	64位下载地址：https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi



三.Node.js创建应用步骤
	1).引入require 模块 -------------->: var http = require('http')
	2).利用 http.creatServer().listen()创建服务器并绑定端口号

http.creatServer(function(request,response){
	//发送 HTTP 头部
	//HTTP 状态值： 200：OK
	//内容类型： text/plain
	response.writeHead( 200, {'content-type':'text/plain'});
	
	//发送响应数据 "Hello world"
	response.end('Hello world');
}).listen(8888)

//终端打印如下信息
console.log('Server running at http://127.0.0.1:8888/');

	
	3）分析： ----------->第一行请求Node.js自带的HTTP模块
		  ----------->调用函数：createServer。这个函数会返回一个对象
		这个对象有listen的方法，可以指定这个 HTTP 服务器监听端口号


*******************************npm******************************************
npm：是nodejs一起安装的《包》管理工具。
	
使用环境：
	1）.用户从NPM服务器下载别人编写好的第三方《包》到本地使用
	2）.用户从NPM服务器下载并安装bier编写的命令行程序到本地使用
	3）.用户将自己编写的包或者《指令行》程序上传到NPM服务器供bier使用

常用指令：
	1）检查npm版本 	--------------------> $ npm -v
	
	2）升级npm 	--------------------> $ npm install npm -g (windows版本)
					      $ cnpm install npm -g(使用淘宝镜像)
	3）安装模块	--------------------> $ npm install <module Name>
			默认安装在 node_modules 目录中，通过 require(module Name)调用
		例如： var express = require（'express'）
	
	4）全局安装   	--------------------> 加上 -g就是全局  不加就是本地安装

	5）查看模块的版本号	--------------------> $ npm list <moudle Name>
	
	6）查看所有全局安装的模块	--------------------> $ npm list -g

	7）卸载Node.js 模块	--------------------> $ npm uninstall <module Name>

	8）检查是否卸载		--------------------> $ npm ls

	9）更新模块	--------------------> $ npm update <module Name>

package.json 属性说明
	
	・包名 --------------------> name
	
	・包的版本号 --------------------> version
	
	・包的描述 --------------------> description
	
	・包的官网 --------------------> homepage
	
	・包的作者 --------------------> author
	
	・包的其他贡献者姓名 --------------------> contrbutors
	
	・依赖包列表（没有会自动安装在 node_module目录）--------------------> dependencies

	・包的来源类型（git \ svn） --------------------> repository

	・指定程序主入口文件require（）就会加载这个文件 --------------------> main


----------------------------node.js REPL(交互式解释器)-------------------

Node 自带了交互式解释器，可以很好的调试 javascript 代码，可以执行以下任务
	・读取	-----------> 读取用户输入，解析输入 javascript 数据结构并存储在内存中
	
	・执行	-----------> 执行输入的数据结构
	
	・打印	-----------> 输出的结果

	・循环	-----------> 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出
		
	・启动 Node 终端  -----------> $ node

	・使用变量	----------->用 var 关键字声明变量，如果没有使用就会直接打印出来
			使用了 var 关键字的变量可以使用 console.log() 输出变量

	・多行表达式	-----------> node 会自动检测是否为连续的表达式

REPL命令：
	・退出当前终端 ----------->CTRL+c
	
	・退出 node repl ----------->ctrl+c (两次) 或者 CTRL+d

	・列出当前命令 -----------> tab
	
	・列出使用命令 -----------> help
	
	・退出多行表达式 -----------> break 或者 clear
	
	・保存当前的 node repl 会话到指定文件 ----------->save filename

	・载入当前 node repl 会话的文件内容	


node.js 回调函数
	
node.js异步编程直接体现就是回调，node所有的api都支持回调函数
	・阻塞调用 ----------->需要等待文件读取完成后才执行完程序（按顺序执行）

	・非阻塞调用 ----------->不需要等待文件读取完，（不按顺序执行），可提高程序的性能，可
				处理大量并发请求
		
	语法：fs.readFile('文件'，回调函数《function(err,data){}》)；


------------------------------node.js 事件循环-----------------------------------------
・node.js是单进程单线程应用程序，通过事件和回调支持并发，所有性能非常高

・node.js的每一个api都是异步的，并作为一个独立线程运行，使用异步函数，并发处理

・node.js单线程类似于金融一个 while（true）的事件循环，直到没有事件观察者退出，每一个异步事件
	都生成一个事件观察者，如果没有事件发生就调用该回调函数

事件驱动程序
	node.js使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务
    下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果就返回给用户。
    这个模型是非常高效可拓展性非常强，因为webserver一直接受请求而不等待任何读写操作。
    在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。


1）node.js EventEmitter
	events 模块只提供了一个对象： events.EventEmitter.核心是事件触发与事件监听器功能的封装。可通过require('events')来访问该模块。
	
	nat.Server对象会在每次有新链接时分发一个事件。
	
	fs.readStream对象会在文件被打开的时候发出一个事件。

	on:用于绑定事件函数 --------->























============================Node.js 指令=============================
* node -v 	----->查看node当前版本

* cd 		----->进入某个文件夹

* cd.. 		----->返回当前文件夹的上一级
