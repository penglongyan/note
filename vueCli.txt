************** 使用vue-cli搭建项目 **********************
*安装node.js

*下载地址：http://nodejs.cn/下载安装包（固定版本）

* node -v 和 npm -v 显示安装版本，就说明安装成功

*全局安装vue-cli 	-------------》 $ npm install -g vue-cli

*推荐使用国内镜像来安装

*安装cnpm 		-------------》 $ npm install -g cnpm --registry=https://registry.npm.taobao.org

*如果安装失败 		-------------》 $ npm cache clean 清除缓存，再重新安装

*cnpm -v 显示安装版本，就说明安装成功了

*使用 cnpm 安装 vue-cli 和 webpack 	-------------》 $ cnpm install -g vue-cli (带有webpack插件)

*vue -V（大写） 显示版本，就说明安装成功了

*如果提示“无法识别‘vue’”，有可能是 npm 版本过低，-------------》 $ npm install npm (更新npm版本)

*创建项目并初始化 -------------》 $ vue init webpack 项目名 （会在当前目录生成一个该名称的项目文件夹）

-->Project name 	（项目名称，可更改）
-->Project description 	（项目描述）
-->Auothor 		（作者）
-->Vue build 		（打包方式）
-->Use ESLint to lint your code?	（使用ESLint规范代码，选择 yes）
-->Pick an ESLint preset		（使用ESLint规范代码）
-->Setup unit tests with Karma + Mocha?	（单元测试，选择 no）
-->Setup e2e tests with Nightwatch?	（单元测试，选择 no）

*进入项目文件 	-------------》$ cd 项目名

*安装项目依赖 	-------------》$ cnpm install

*启动项目 	-------------》$ npm run dev

*如果浏览器打开之后，没有加载出页面，可能是本地端口被占用，修改配置文件 config>index.js

*assetsPublicPath: './'， （打包后的路径）

*port：8075， （修改端口号）

*建议将端口号改为不常用的端口，将build 的路径修改为"./"

*因为打包之后，外部引入js 和 css 文件时，如果路径以 "/"开头，在本地是无法找到对应文件的（服务器没问题）
，所以如果需要在本地打开打包后的文件，就得修改文件路径

*打包上线 -------------》$ npm run build （自己的项目文件都要放到src文件夹下）	



*******************组件之间的数据传递*************************

*Vue的组件作用域都是孤立的，不允许在子组件的模板内直接引用父组件的数据，必须时间用特定的方法才能实现组件之间的数据传值

**父组件向子组件传递数据，在Vue中，可以使用《props》向子组件传递数据。

**子组件向父组件传递数据，在Vue中，子组件主要通过《事件》传递数据给父组件。

*首先在子组件声明一个方法setUser ，用change事件来调用setUser

*在 setUser 中，使用$emit来遍历 TransferUser 事件，并返回this.username

*其中transferUser 是一个自定义的事件，功能类似于一个中转，this.username将通过这个事件传递给父组件。

*在父组件中，声明一个 getuser，用transferUser事件调用getUser方法，获取到从子组件传递过来的参数《username》

*getUser 方法中的参数 msg就是从子组件传递过来的参数 username

**子组件向子组件传递数据

*Vue 没有直接子组件对子组件传参的方法，建议将学哟啊传递数据的子组件，都合并为一个组件。如果一定需要对子组件传参，可以先传到父组件，
   在传到子组件。

*为了便于开发，Vue推出了一个《状态管理工具 Vuex》，可以很方便实现组件之间的参数传递。

*******************使用 Vue-router 跳转页面*************************

*使用 Vue.js 做项目的时候，一个页面是由多个组件构成的，所以在跳转页面的时候并不适合用传统的 href,于是 vue-router 应运而生。

*<router-view>是用来渲染通过路由映射过来的组件，当路径更改时，<router-view>里的内容也会发生改变。

*在配置路由后面，添加 children ，并在 children 中添加二级路由，就能实现路由嵌套

*在配置path的时候，以“/”开头的嵌套路径会被当做跟路径，所以子路由的path不需要添加“/”

************************************Vuex*******************************

**安装并引入Vuex

*安装 ===============》cnpm install vuex -s

*引入 在mian.js 引入   import vuex from 'vuex'  =============>     import store from './vuex/store'

*必须use后才能使用  ======================》 Vue.use(Vuex)

**构建核心仓库

*Vuex 应用的状态 state都应当存放在 store.js里面，Vue组件可以从store.js 中获取动态，可以吧store通俗的理解为一个全局变量的仓库，但是
	和单纯的全局变量又有一些区别，主要体现在当 store中的状态发生改变时，相应的 vue 组件也会得到高效的更新。

*在src目录下创建一个 vuex 目录，将store.js放到vuex目录下

*
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

const store = new Vuex.Store({
  // 定义状态
  state: {
    author: 'Wise Wrong'
  }
})

export default store

*虽然在main.js中已经引入了Vue和Vuex,但是里面还的在引入一次

**将状态映射到组件
